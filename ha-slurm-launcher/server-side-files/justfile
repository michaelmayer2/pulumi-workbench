set dotenv-load

EFS_ID := env_var("EFS_ID")  # For example: 'fs-0ae474bb0403fc7c6'
SLURM_VERSION := env_var("SLURM_VERSION")
CIDR_RANGE := env_var("CIDR_RANGE")
NFS_SERVER := env_var("NFS_SERVER")
SLURM_SERVERS := env_var("SLURM_SERVERS")
SLURM_COMPUTE_NODES := env_var("SLURM_COMPUTE_NODES")
SLURM_COMPUTE_NODES_MEM := env_var("SLURM_COMPUTE_NODES_MEM")
SLURM_COMPUTE_NODES_CPU := env_var("SLURM_COMPUTE_NODES_CPU")
WORKBENCH_NODES := env_var("WORKBENCH_NODES")
PWB_VERSION := env_var("PWB_VERSION")
PWB_LICENSE := "" #env_var("PWB_LICENSE")
AD_DOMAIN := env_var("AD_DOMAIN")
AD_PASSWD := env_var("AD_PASSWD")


do-it:
    #!/bin/env bash
    if [ `hostname` == {{SLURM_SERVERS}} ]; then
        just build-slurm-head-nodes
    fi
    if [[ "{{SLURM_COMPUTE_NODES}}" =~ .*`hostname`.* ]]; then
        just build-slurm-compute-nodes
    fi
    if [[ "{{WORKBENCH_NODES}}" =~ .*`hostname`.* ]]; then
        just build-workbench-nodes
    fi




build-workbench-nodes:
    #!/bin/env bash
    just install-linux-tools
    just integrate-ad
    just mount-efs
    just munge-setup
    just munge-key-copy
    just slurm-path

    # Set up shared drive
    sudo mkdir -p /efs/rstudio/shared-storage

    # Install RSW and required dependencies
    just install-r 
    just symlink-r
    just install-rsw
    just generate-cookie-key
    sudo cp -r /etc/rstudio /etc/rstudio.bak

    # Set up config files
    if [ -f ~/rserver.conf ]; then
        just copy-rsw-config-files
        just create-launcher-ssl
    fi
    just setup-rsw-systemctl-overrides 
    just install-launcher-ssl 
    # Restart
    just restart-clean 


copy-rsw-config-files:
    #!/bin/env bash
    configdir="/efs/rstudio/etc/rstudio"
    sudo mkdir -p $configdir
    sudo cp ~/rserver.conf $configdir/rserver.conf 
    sudo cp ~/load-balancer $configdir/load-balancer 
    sudo cp ~/database.conf $configdir/database.conf
    sudo chmod 0600 $configdir/database.conf
    sudo chown rstudio-server:rstudio-server $configdir/database.conf 
    sudo cp ~/launcher.conf $configdir/launcher.conf
    sudo cp ~/launcher.slurm.conf $configdir/launcher.slurm.conf
    sudo cp ~/launcher.slurm.profiles.conf $configdir/launcher.slurm.profiles.conf
    sudo cp ~/logging.conf $configdir/logging.conf 
    #rm -f ~/rserver.conf ~/load-balancer ~/database.conf ~/launcher.conf 
    

install-launcher-ssl:
    #!/usr/bin/bash
    sudo apt-get install -y ssl-cert
    sudo usermod --append --groups ssl-cert rstudio-server

create-launcher-ssl:
    #!/usr/bin/env bash
    set -euxo pipefail
    configdir="/efs/rstudio/etc/rstudio"
    sudo mkdir -p $configdir
    if [ ! -f $configdir/launcher.pem ]; then 
        sudo openssl genpkey -algorithm RSA -out $configdir/launcher.pem -pkeyopt rsa_keygen_bits:2048
        sudo chown rstudio-server:rstudio-server $configdir/launcher.pem
    fi
    if [ ! -f $configdir/launcher.pub ]; then
        sudo openssl rsa -in $configdir/launcher.pem -pubout > /tmp/launcher.pub
        sudo cp /tmp/launcher.pub $configdir
        sudo rm -f /tmp/launcher.pub
        sudo chown rstudio-server:rstudio-server $configdir/launcher.pub
    fi

restart-clean:
    sudo rstudio-server stop
    sudo rstudio-launcher stop
    sudo rm -rf /var/log/rstudio*
    sudo rstudio-launcher start
    sudo rstudio-server start


setup-rsw-systemctl-overrides:
    #!/bin/env bash
    configdir="/efs/rstudio/etc/rstudio"
    for i in server launcher 
    do
        sudo mkdir -p /etc/systemd/system/rstudio-$i.service.d
        echo "[Service]" | sudo tee -a /etc/systemd/system/rstudio-$i.service.d/override.conf
        echo "Environment=\"RSTUDIO_CONFIG_DIR=$configdir\"" | sudo tee -a /etc/systemd/system/rstudio-$i.service.d/override.conf
    done
    sudo systemctl daemon-reload



install-r r_version='4.2.2':
    #!/bin/env bash
    export DEBIAN_FRONTEND=noninteractive                   
    curl -O https://cdn.rstudio.com/r/ubuntu-2004/pkgs/r-{{r_version}}_1_amd64.deb
    sudo -E gdebi -n r-{{r_version}}_1_amd64.deb 
    rm -f r-{{r_version}}_1_amd64.deb

symlink-r r_version='4.2.2':
    #!/bin/bash
    if ! [ -f /usr/local/bin/R ]; then
        sudo ln -s /opt/R/{{r_version}}/bin/R /usr/local/bin/R
        sudo ln -s /opt/R/{{r_version}}/bin/Rscript /usr/local/bin/Rscript
    fi


install-rsw:
    #!/bin/env bash
    export DEBIAN_FRONTEND=noninteractive
    if [ ! -f rstudio-workbench-{{PWB_VERSION}}-amd64.deb ]; then 
        curl -O https://s3.amazonaws.com/rstudio-ide-build/server/bionic/amd64/rstudio-workbench-{{PWB_VERSION}}-amd64.deb
    fi 
    sudo -E gdebi -n rstudio-workbench-{{PWB_VERSION}}-amd64.deb 
    #sudo rstudio-server license-manager activate {{PWB_LICENSE}}
    rm -f rstudio-workbench-{{PWB_VERSION}}-amd64.deb

generate-cookie-key:
    #!/bin/env bash
    export DEBIAN_FRONTEND=noninteractive                   
    sudo apt-get update 
    sudo apt-get install -y uuid
    sudo mkdir -p /efs/rstudio/etc/rstudio/
    cookie_key_location="/efs/rstudio/etc/rstudio/secure-cookie-key"
    if [ ! -f ${cookie_key_location} ]; then 
        sudo sh -c "echo `uuid` > ${cookie_key_location}"
        sudo chmod 0600 ${cookie_key_location} 
        sudo chown rstudio-server:rstudio-server ${cookie_key_location}
    fi 



build-slurm-compute-nodes:
    #!/bin/env bash
    just install-linux-tools
    just integrate-ad
    just mount-efs
    just slurm-run-osdeps
    just munge-setup
    just munge-key-copy
    just start-slurmd 
    just slurm-path
    just pwb-session-components
    just install-r


pwb-session-components:
    #!/bin/env bash
    sudo apt-get install -y curl libcurl4-gnutls-dev libssl-dev libuser libuser1-dev rrdtool libpq5
    curl -O https://s3.amazonaws.com/rstudio-ide-build/session/bionic/amd64/rsp-session-bionic-{{PWB_VERSION}}-amd64.tar.gz
    sudo mkdir -p /usr/lib/rstudio-server
    sudo tar -zxvf ./rsp-session-bionic-{{PWB_VERSION}}-amd64.tar.gz -C /usr/lib/rstudio-server/
    sudo mv /usr/lib/rstudio-server/rsp-session*/* /usr/lib/rstudio-server/
    sudo rm -rf /usr/lib/rstudio-server/rsp-session*
    rm -f ./rsp-session-bionic-{{PWB_VERSION}}-amd64.tar.gz


start-slurmd:
    #!/bin/env bash
    sudo mkdir /var/{log,run}/slurm
    sudo chown slurm /var/{log,run}/slurm
    sudo /efs/slurm/sbin/slurmd 

build-slurm-head-nodes: 
    #!/bin/env bash
    # Basic setup
    just install-linux-tools
    just integrate-ad
    just mount-efs 
    just slurm-prereqs
    if [ ! -d /efs/slurm/bin ]; then 
        just slurm-compile-and-install
    fi 
    just slurm-logs-prepare
    just slurm-copy-config
    just slurm-config
    just slurm-start-daemons
    just slurm-path



slurm-start-daemons:
    #!/bin/env bash
    sudo /efs/slurm/sbin/slurmdbd 
    sleep 10
    sudo /efs/slurm/sbin/slurmctld

slurm-copy-config:
    #!/bin/env bash
    sudo cp slurmdbd.conf /efs/slurm/etc
    sudo chmod 0600 /efs/slurm/etc/slurmdbd.conf
    sudo chown slurm /efs/slurm/etc/slurmdbd.conf
    sudo cp slurm.conf /efs/slurm/etc 

munge-setup: 
    #!/bin/env bash
    #add munge user
    sudo groupadd -r --gid=105 munge
    sudo useradd -r -s /bin/bash -g munge --uid=105 munge
    #add slurm users
    sudo groupadd -r --gid=995 slurm
    sudo useradd -r -s /bin/bash -g slurm --uid=995 slurm 
    sudo apt-get install -y libmunge-dev libmunge2 munge

munge-config:
    #!/bin/env bash
    #create key
    sudo mkdir -p /efs/slurm
    sudo dd if=/dev/random bs=1 count=1024 of=/efs/slurm/.munge.key
    just munge-key-copy

munge-key-copy:
    #!/bin/env bash
    #copy key and add permissions
    sudo cp /efs/slurm/.munge.key /etc/munge/munge.key
    sudo chown munge:munge /etc/munge/munge.key
    sudo chmod 400 /etc/munge/munge.key
    sudo systemctl restart munge

slurm-logs-prepare:
    #!/bin/env bash
    sudo mkdir -p /var/spool/slurm
    sudo chown slurm:slurm /var/spool/slurm
    sudo chmod 755 /var/spool/slurm
    sudo mkdir -p /var/spool/slurm/slurmctld
    sudo chown slurm:slurm /var/spool/slurm/slurmctld
    sudo chmod 755 /var/spool/slurm/slurmctld
    sudo mkdir -p /var/spool/slurm/cluster_state
    sudo chown slurm:slurm /var/spool/slurm/cluster_state
    sudo touch /var/log/slurmctld.log
     sudo chown slurm:slurm /var/log/slurmctld.log
    sudo touch /var/log/slurm_jobacct.log /var/log/slurm_jobcomp.log
    sudo chown slurm: /var/log/slurm_jobacct.log /var/log/slurm_jobcomp.log
    sudo mkdir -p /efs/slurm/etc
    sudo mkdir -p /var/{lib,log,run}/slurm
    sudo chown slurm:slurm /var/{lib,log,run}/slurm

slurm-prereqs:
    just munge-setup
    just munge-config
    just slurm-logs-prepare
    just slurm-build-osdeps

slurm-run-osdeps:
    #!/bin/env bash
    #install os dependencies
    sudo apt-get update 
    sudo apt-get -y install \
       gnupg \
       libcgroup1 \
       python-is-python3 \
       python3-pip \
       mariadb-client \
       psmisc \
       bash-completion \
       vim \
       python3-nose

slurm-build-osdeps:
    #!/bin/env bash
    #install os dependencies
    sudo apt-get update 
    sudo apt-get -y install \
       wget \
       bzip2 \
       perl \
       gcc-9 \
       g++-9 \
       gcc \
       g++ \
       git \
       gnupg \
       make \
       libcgroup-dev \
       python-is-python3 \
       python3.8-dev \
       python3-pip \
       cython3 \
       mariadb-client \
       libmariadbd-dev \
       psmisc \
       bash-completion \
       vim \
       python3-nose

slurm-compile-and-install:
    #!/bin/env bash
    tmpdir=`mktemp -d` 
    pushd $tmpdir
    git clone --depth 1 -b slurm-`echo {{SLURM_VERSION}} | sed 's/\./-/g'` https://github.com/SchedMD/slurm.git
    pushd slurm
    echo "configuring SLURM"
    ./configure --enable-debug --prefix=/efs/slurm --sysconfdir=/efs/slurm/etc \
        --with-mysql_config=/usr/bin | sudo tee /var/log/slurm-build.log >& /dev/null
    echo "building SLURM"
    make -j $(( 2*`nproc` )) | sudo tee -a /var/log/slurm-buildlog >& /dev/null
    echo "installing SLURM"
    sudo make install | sudo tee -a /var/log/slurm-build.log >& /dev/null
    popd
    sudo rm -rf $tmpdir

slurm-config:
    #!/bin/env bash
    echo -e "CgroupAutomount=yes\nConstrainCores=yes\nConstrainRAMSpace=yes\nConstrainDevices=yes" | sudo tee -a /efs/slurm/etc/cgroup.conf
    # This is an ugly hack below
    for i in {{SLURM_COMPUTE_NODES}}; do echo "NodeName=$i CPUs={{SLURM_COMPUTE_NODES_CPU}} RealMemory=$(( {{SLURM_COMPUTE_NODES_MEM}}*95/100 )) State=DOWN" |sed "s/\[\[//" | sed "s/\]\]//" | sed "s/'//g" | sed "s/\,//"; done | sudo tee -a /efs/slurm/etc/slurm.conf
    nodeset=`for i in {{SLURM_COMPUTE_NODES}}; do echo "$i" |sed "s/\[\[//" | sed "s/\]\]//" | sed "s/'//g" | sed "s/\,//"; done  | tr '\n' ',' | sed 's/.$//'`
    echo "NodeSet=all_nodes Nodes=$nodeset" | sudo tee -a /efs/slurm/etc/slurm.conf
    echo "PartitionName=all Nodes=all_nodes OverSubscribe=FORCE MaxTime=INFINITE State=UP Default=YES" | sudo tee -a /efs/slurm/etc/slurm.conf


mount-efs:
    #!/bin/env bash
    just install-efs-utils
    df | grep efs$
    if [ $? -ne 0 ]; then 
        sudo mkdir -p /efs;
        sudo mount -t efs -o tls {{EFS_ID}}:/ /efs;
        just set-efs-conf
    fi

install-efs-utils:
    #!/bin/env bash
    export DEBIAN_FRONTEND=noninteractive                   
    set -euxo pipefail
    if ! [ -f /sbin/mount.efs ]; then
        sudo -E apt-get -y install binutils
        tmpdir=`mktemp -d`
        cd $tmpdir 
        git clone https://github.com/aws/efs-utils
        cd efs-utils
        ./build-deb.sh
        sudo -E apt-get -y install ./build/amazon-efs-utils*deb
        cd 
        rm -rf $tmpdir
    fi

set-efs-conf:
    #!/bin/bash
    sudo bash -c 'cat <<EOF >> /etc/fstab
    # mount efs
    {{EFS_ID}}:/ /efs efs defaults,_netdev 0 0
    EOF'









### General things

install-linux-tools:
    #!/bin/bash
    export DEBIAN_FRONTEND=noninteractive 
    sudo -E apt-get update
    sudo -E apt-get install -y tree
    sudo -E apt-get install -y bat ldap-utils
    sudo -E apt-get install -y gdebi-core
    sudo -E apt-get install -y expect 
    sudo -E apt-get install -y net-tools
    echo "alias bat='batcat --paging never'" >> ~/.bashrc

### AD Integration 

install-adcli:
    #!/bin/bash
    sudo apt-get update 
    sudo apt install -y git automake libtool libkrb5-dev libldap2-dev libsasl2-dev make
    git clone -b 0.9.2 https://gitlab.freedesktop.org/realmd/adcli.git
    pushd adcli
    ./autogen.sh --disable-doc
    make -j $(( 2*`nproc` )) 
    sudo make install
    popd
    rm -rf adcli 

install-ad-prereqs:
    #!/bin/bash
    sudo DEBIAN_FRONTEND=noninteractive apt-get -y install expect sssd realmd krb5-user samba-common packagekit pamtester

update-etchosts:
    #!/bin/bash
    sudo apt-get install -y net-tools
    echo -e "\n#Local server\n`ifconfig | grep inet | head -1 | awk '{print $2}'` `hostname`" | sudo tee -a /etc/hosts

copy-ad-files:
    #!/bin/bash
    #let's remove the symlink so that systemd does not interfere 
    sudo rm -f /etc/resolv.conf
    sudo cp ~/krb5.conf /etc/
    sudo cp ~/resolv.conf /etc/
    #rm -f ~/krb5.conf ~/resolv.conf

join-ad:
    #!/bin/bash
    echo $AD_PASSWD | sudo realm join -U Administrator $AD_DOMAIN
    echo "ad_gpo_map_service = +rstudio" | sudo tee -a /etc/sssd/sssd.conf
    echo "krb5_canonicalize = True" | sudo tee -a /etc/sssd/sssd.conf
    sudo sed -i 's#use_fully_qualified_names.*#use_fully_qualified_names=False#' /etc/sssd/sssd.conf
    sudo systemctl stop sssd && sudo rm -f /var/lib/sss/db/* && sudo systemctl start sssd
    sudo pam-auth-update --enable mkhomedir

integrate-ad:
    just install-adcli 
    just install-ad-prereqs
    just update-etchosts 
    just copy-ad-files
    just join-ad

slurm-path:
    echo "export PATH=/efs/slurm/bin:\$PATH" | sudo tee -a /etc/profile.d/slurm.sh

prometheus-client:
    #!/bin/bash
    sudo apt-get install -y prometheus-node-exporter
    sudo apt-get install -y prometheus-process-exporter  

prometheus-server:
    #!/bin/bash
    sudo apt-get install -y prometheus
    just prometheus-client

    cat << EOF | sudo tee /etc/prometheus/prometheus.yml
    global:
    scrape_interval: 15s

    scrape_configs:
    - job_name: node
    static_configs:
    - targets: ['XXX']
    EOF

    prom_targets=`/opt/slurm/bin/sinfo -N  -h  | awk '{print $1}' | tr '\n' ' ' | rev | sed "s# #','#2g" | rev | sed "s#',#:9100',#g" | sed 's/ /:9100/'`

    sudo sed -i "s/XXX/localhost:9100','\$prom_targets/" /etc/prometheus/prometheus.yml

    sudo systemctl restart prometheus


grafana-server:
    #!/bin/bash
    wget -q -O - https://packages.grafana.com/gpg.key | gpg --dearmor | sudo tee /usr/share/keyrings/grafana.gpg > /dev/null
    sudo echo "deb [signed-by=/usr/share/keyrings/grafana.gpg] https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
    sudo apt-get update
    sudo apt-get install -y grafana
    sudo systemctl stop grafana-server
    aws s3 cp s3://S3_BUCKETNAME/grafana.db.gz /var/lib/grafana
    sudo gzip -d /var/lib/grafana/grafana.db.gz
    sudo chown grafana:grafana /var/lib/grafana/grafana.db 
    sudo chmod 640 /var/lib/grafana/grafana.db 

    sudo systemctl start grafana-server


